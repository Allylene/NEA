from tkinter import *
from tkinter import ttk
from tkinter import filedialog
import string
import random
import math
import csv

# has to be the first thing you write in tkinter
root = Tk()
root.title("NEA")
root.geometry("400x400")


class PasswordGenerator(Frame):
    def __init__(self, parent, stack):
        #inheritence
        super().__init__(parent)
        self.stack = stack
        Label(self, text="Password generator").pack()

        self.password = Password()
        # Initialising usernames list
        self.usernames = [] 
        self.Back = Button(self, text = "back", command=stack.BackButton)
        self.Back.pack()
        #drop down menu option for length of password
        self.options = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
        self.lengthPassword = Label(self, text = "Length of Password").pack()
        self.selected_length_var = StringVar()
        self.combo = ttk.Combobox(self, textvariable=self.selected_length_var, values=self.options, state="normal")
        self.combo.pack()




        #intvars for the checkboxes
        self.choiceNum = IntVar()
        self.choiceSpec = IntVar()
        self.choiceChar = IntVar()
        #checkboxes for conditions of password generated
        self.Characters = Checkbutton(self, text = "Characters?", variable = self.choiceChar).pack()
        self.Numbers = Checkbutton(self, text = "Numbers?", variable = self.choiceNum).pack()
        self.SpecialCharacters = Checkbutton(self, text = "Special Characters?", variable = self.choiceSpec).pack()


        self.generate = Button(self, text = "Generate password", command = self.actually_generate_password).pack()
        #creating error messages framebase or whatever
        self.errorMessage = Label(self, text="", fg="red")
        self.errorMessage.pack()

        self.ImportFile = Button(self, text = "Import File", command=self.ImportFile)
        self.ImportFile.pack()
        self.MassGenerate = Button(self, text = "Generate and save passwords", command=self.MassGenerate)
        self.MassGenerate.pack()

    def ImportFile(self):
        #opens the thingamagic that lets you even select a file in the first place
        filepath = filedialog.askopenfilename(filetypes=[("CSV Files", "csv")])
        if filepath:
            #reads each file line and stores it as a username
            with open(filepath, "r") as file:
                self.usernames = file.readlines()

    def MassGenerate(self):
        #place to store the file with usernames
        outputFile =  filedialog.asksaveasfilename(defaultextension=".csv", filetypes=[("CSV Files", "*.csv")])
        if self.choiceSpec.get() == 1:
                        characterList += string.punctuation

        if self.choiceNum.get() == 1:
            characterList += string.digits

        if self.choiceChar.get() == 1:
            characterList += string.ascii_letters
                
        if outputFile:  
            with open(outputFile, 'w', newline = '') as csvfile:
                writer = csv.writer(csvfile)
                writer.writerow(["Username", "Password"])  
                for username in self.usernames:
                    # Generate a random password for each username in there
                    username = username.strip()  
                    password = self.password.generatePassword(self.selected_length_var, characterList)
                    writer.writerow([username, "".join(password)])  



    def actually_generate_password(self):
        #converts intvar into an integer
        try:
            selected_value = self.selected_length_var.get()

            #makes sure decimal lengths cant be typed in
            if not str(selected_value).isdigit():
                self.errorMessage.config(text = "Please select a positive integer length")
                return

            self.lengthOfPassword = int(selected_value)


            #self.SpecialCharactersOption = self.SpecialCharacters.get()
            characterList = ""

            #options for checkboxes
            if self.choiceSpec.get() == 1:
                characterList += string.punctuation

            if self.choiceNum.get() == 1:
                characterList += string.digits

            if self.choiceChar.get() == 1:
                characterList += string.ascii_letters


            if self.lengthOfPassword >= 100:
                self.errorMessage.config(text = "Please enter a sensible number")
                return
            elif self.lengthOfPassword <= 0:
                self.errorMessage.config(text = "Please enter a number bigger than 0")
                return
            elif characterList == "":
                self.errorMessage.config(text = "Please select a checkbox")
            else:
                self.errorMessage.config(text = "")
                generatedPassword = self.password.generatePassword(self.lengthOfPassword, characterList)


                #using text instead of label means they can copy-paste the password
                self.outputtedPassword = Text(self, height=1, width=30)
                self.outputtedPassword.pack()

                self.outputtedPassword.delete("1.0", "end")  # Clear previous content
                self.outputtedPassword.insert("1.0", "".join(generatedPassword))  # Add the new password

        except ValueError:
            self.errorMessage.config(text="Please select a valid integer length")

class Password():
    def __init__(self):
        ...
    def generatePassword(self, lengthOfPassword, characterList):
        passwordList = []
        for i in range (lengthOfPassword):
            randomchar = random.choice(characterList)
            passwordList.append(randomchar)

        self.outputtedPassword = passwordList
        return self.outputtedPassword

    def evaluatePassword(self,password):
        length = len(password)

        pool = 0 

        for char in password:
            if char in string.ascii_lowercase:
                pool += 26 
                break  

        
        for char in password:
            if char in string.ascii_uppercase:
                pool += 26  
                break  

        
        for char in password:
            if char in string.digits:
                pool += 10  
                break  

       
        for char in password:
            if char in string.punctuation:
                pool += 32 
                break  

        if pool > 0:
            entropy = math.log2(pool ** length)
            return entropy
        else:
            return 0

    
    def evaluateStrength(self, password):
        entropy = self.evaluatePassword(password)
        
        if entropy < 28:
            return "Very Weak"
        elif 28 <= entropy < 35:
            return "Weak"
        elif 36 <= entropy < 59:
            return "Reasonable"
        elif 60 <= entropy < 127:
            return "Strong"
        else:
            return "Very Strong"
    




class PasswordStrength(Frame):
    def __init__(self, parent, stack):
        #inheritence
        super().__init__(parent)
        self.stack = stack
        self.password = Password()
        Label(self, text="Password strength").pack()
        Label(self, text = "Enter Password").pack()

        self.passwordEntry = Entry(self, show = "*")
        self.passwordEntry.pack()
        self.length = Label(self, text = "length: 0")
        self.length.pack()
        self.strength = Label(self, text = "strength: weak")
        self.strength.pack()

        self.passwordEntry.bind("<KeyRelease>", self.updatePasswordInfo)

        self.goBack = Button(self, text = "back", command=self.stack.BackButton)
        self.goBack.pack()

    def updatePasswordInfo(self,event):
        self.password = Password()
        password = self.passwordEntry.get()
        self.length.config(text = f"length: {len(password)}")
        self.strength.config(text = f"strength:{self.password.evaluateStrength(password)}")
        ...





#mainwindow frame
#wanted it to inherit from frame originally too but it stopped working when i did SO DONT LET IT INHERIT FROM FRAME!! ITS FINE!!!!!!
class MainWindow:
    def __init__(self, main, stack):
        self.main = main
        self.MainFrame = Frame(main)
        self.MainFrame.pack()
        self.stack = stack
        self.frameStack = [self.MainFrame] 
        stack.setFrameStack(self.frameStack)

        self.index = 0

        self.myLabel = Label(self.MainFrame, text="Welcome!")

        # making the buttons
        self.PasswordGeneratorButton = Button(self.MainFrame, text="Random Password Generator", command = self.stack.MainFrame_to_Password_Generator)
        self.PasswordStrengthButton = Button(self.MainFrame, text="Password strength checker", command= self.stack.MainFrame_to_Password_Strength)

        # packing the buttons
        self.myLabel.pack(pady=2)
        self.PasswordGeneratorButton.pack(pady=10)
        self.PasswordStrengthButton.pack(pady=10)


 

class Stack(Frame):
    def __init__(self, parent):
        super().__init__(parent) 
        self.frameStack = []
        self.maxSize = 2

    def setFrameStack(self, frameStack):
        self.frameStack = frameStack

    def MainFrame_to_Password_Generator(self):
        if not self._isFull():
            if self.frameStack:
                self.frameStack[-1].pack_forget()
            
            newFrame = PasswordGenerator(self.stack, self.frameStack)
            self.frameStack.append(newFrame)
            newFrame.pack()
        


    def MainFrame_to_Password_Strength(self):
        if not self._isFull():
            if self.frameStack:
                self.frameStack[-1].pack_forget()

            newFrame = PasswordStrength(self.stack, self.frameStack)
            self.frameStack.append(newFrame)
            newFrame.pack()
    def BackButton(self):
        self.frameStack.pop().pack_forget() 
        self.frameStack[-1].pack()
    

    def _isFull(self):
        if len(self.frameStack) > self.maxSize:
            return True
        else:
            return False

stack = Stack(root)
app = MainWindow(root, stack)

# has to be the last thing you write in tkinter
root.mainloop()
